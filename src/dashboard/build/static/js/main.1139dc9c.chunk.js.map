{"version":3,"sources":["create.tsx","list.tsx","nav.tsx","subscribe.tsx","index.tsx"],"names":["TaskCreate","autobind","arg","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","gameName","startPage","endPage","undefined","task","selectType","cb","_this2","sto","setTimeout","runPoll","ev","_this3","_this$state","preventDefault","Axios","post","then","res","data","error","alert","props","history","push","newState","target","name","value","setState","react","style","textAlign","onSubmit","handleSubmit","type","onChange","handleValueChange","React","TaskList","args","dataSource","progressString","get","nowTask","status","getTaskDetail","_id","progressInterval","setInterval","clearInterval","clearTimeout","poll","taskId","_this4","concat","componentDidMount","location","reload","resultUrl","href","onClick","handleExport","bind","_this5","length","map","t","i","background","margin","color","desc","Date","createdAt","toLocaleTimeString","renderStatus","timeConsuming","renderResultUrl","Nav","width","Link","to","children","GoodsSubscribe","ReactDOM","HashRouter","Switch","nav","Route","path","exact","component","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.1139dc9c.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { autobind } from \"core-decorators\";\nimport Axios from \"axios\";\nimport { ITask } from \"../../core/model\";\n\n@autobind\nclass TaskCreate extends React.Component<any, { gameName: string, startPage: number, endPage: number, task: ITask, selectType: string }> {\n    public sto: any;\n    constructor(arg) {\n        super(arg);\n        this.state = {\n            gameName: \"\",\n            startPage: 1,\n            endPage: undefined,\n            task: null,\n            selectType: \"1\",\n        };\n    }\n\n    public runPoll(cb) {\n        this.sto = setTimeout(() => {\n            if (cb) {\n                cb();\n            }\n            this.runPoll(cb);\n        }, 1000);\n    }\n\n    // public getTaskDetail(taskId) {\n    //     return () => {\n    //         Axios.get<ITask>(`/api/task/${taskId}`)\n    //             .then((res) => {\n    //                 if (res.data.status === 1) {\n    //                     clearTimeout(this.sto);\n    //                     const task = res.data;\n    //                     this.setState({\n    //                         task,\n    //                     });\n    //                 }\n    //         });\n    //     };\n    // }\n\n    public handleSubmit(ev) {\n        const { gameName, startPage, endPage } = this.state;\n        ev.preventDefault();\n        Axios.post(\"/api/task\", {\n            gameName,\n            startPage,\n            endPage,\n        })\n            .then((res) => {\n                if (res.data.error === 0) {\n                    alert(\"创建成功，请等待任务单运行\");\n                    this.props.history.push(\"/\");\n                }\n            });\n    }\n\n    public handleValueChange(ev) {\n        const newState = {};\n        newState[ev.target.name] =  ev.target.value;\n        this.setState(newState);\n    }\n\n    public render() {\n        return (\n            <section style={{ textAlign: \"center\" }}>\n                <h1>创建任务单</h1>\n                <form onSubmit={this.handleSubmit}>\n                    <label>游戏名：（请输入 dota2 或者 csgo）</label>\n                    <input type=\"text\" onChange={this.handleValueChange} name=\"gameName\"></input>\n                    <br /><br />\n                    <label>开始页数：（爬取开始的页数，一般为 1，平均一页1500条数据）</label>\n                    <input type=\"number\" onChange={this.handleValueChange} name=\"startPage\"></input>\n                    <br /><br />\n                    <label>结束页数：（爬取结束的页数，填-1为最后一页）</label>\n                    <input type=\"number\" onChange={this.handleValueChange} name=\"endPage\"></input>\n                    <br /><br />\n                    <button type=\"onSubmit\">开始    ！</button>\n                </form>\n            </section>\n        );\n    }\n}\n\nexport default TaskCreate;\n","import * as React from \"react\";\nimport Axios from \"axios\";\nimport { ITask } from \"../../core/model\";\nimport { autobind } from \"core-decorators\";\n\n@autobind\nclass TaskList extends React.Component<{}, { dataSource: ITask[], progressString: string; }> {\n    public progressInterval: NodeJS.Timer;\n    public poll: NodeJS.Timer;\n\n    constructor(args) {\n        super(args);\n        this.state = {\n            dataSource: [],\n            progressString: \"\",\n        };\n    }\n\n    public componentDidMount() {\n        Axios.get(\"/api/task\")\n            .then((res) => {\n                const nowTask = res.data[0];\n                if (nowTask.status === -1) {\n                    this.runPoll(this.getTaskDetail(nowTask._id));\n                    this.progressInterval = setInterval(() => {\n                        this.setState((state) => ({ progressString: state.progressString + \".\" }));\n                    }, 1000);\n                }\n                this.setState({ dataSource: res.data });\n            });\n    }\n\n    public componentWillUnmount() {\n        clearInterval(this.progressInterval);\n        clearTimeout(this.poll);\n    }\n\n    public runPoll(cb) {\n        this.poll = setTimeout(() => {\n            if (cb) {\n                cb();\n            }\n            this.runPoll(cb);\n        }, 2000);\n    }\n\n    public getTaskDetail(taskId) {\n        return () => {\n            Axios.get<ITask>(`/api/task/${taskId}`)\n                .then((res) => {\n                    if (res.data.status === 1) {\n                        clearTimeout(this.poll);\n                        clearInterval(this.progressInterval);\n                        this.componentDidMount();\n                        // const nowTask = res.data;\n                        // this.setState((state) => ({ dataSource: state.dataSource.splice(0, 1, nowTask) }));\n                    }\n            });\n        };\n    }\n\n    public renderStatus(status) {\n        switch (status) {\n            case -1:\n                return \"运行中\";\n            case 0:\n                return \"运行失败\";\n            case 1:\n                return \"成功！\";\n        }\n    }\n\n    public handleExport(task: ITask) {\n        Axios.get(`/api/task/${task._id}/export`)\n            .then((res) => {\n                if (res.data.error === 0) {\n                    location.reload();\n                }\n            });\n    }\n\n    public renderResultUrl(task: ITask) {\n        if (task.status === 1) {\n            if (task.resultUrl) {\n                return <p>数据下载链接：<a href={`/${task.resultUrl}`}>{task.resultUrl}</a></p>;\n            } else {\n                return <p><button onClick={this.handleExport.bind(this, task)}>导出数据</button></p>;\n            }\n        }\n    }\n\n    public render() {\n        const { dataSource, progressString } = this.state;\n        return (\n            <section>\n                <h1>任务单列表：</h1>\n                {dataSource.length > 0 ? dataSource.map((t, i) => (\n                    <section style={ { background: \"#818181\", margin: \"20px 20px\", color: \"white\"  } }>\n                        <p>描述：{t.desc}</p>\n                        <p>创建时间：{new Date(t.createdAt).toLocaleTimeString()}</p>\n                        <p>状态：{this.renderStatus(t.status)}{i === 0 ? progressString : null}</p>\n                        {t.status === 1 ? <p>耗时：{t.timeConsuming}</p> : null}\n                        {this.renderResultUrl(t)}\n                    </section>\n                )) : \"还没有任务单或者任务单已经过期自动删除，点击右上方去创建！\"}\n            </section>\n        );\n    }\n}\n\nexport default TaskList;\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Nav extends React.Component {\n    public render() {\n        return (\n            <div>\n                <nav style={{ textAlign: \"center\", width: \"100vw\", margin: \"0 0 50px 0\" }}>\n                    <Link to=\"/\" style={{ margin: \"0 30px \" }}>当前任务单</Link>\n                    <Link to=\"/create\" style={{ margin: \"0 30px \" }}>创建新任务单</Link>\n                    <Link to=\"/subscribe\" style={{ margin: \"0 30px \" }}>饰品监听</Link>\n                </nav>\n            {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Nav;\n","import * as React from \"react\";\n\nclass GoodsSubscribe extends React.Component {\n    public render() {\n        return \"开发中！\";\n    }\n}\n\nexport default GoodsSubscribe;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport TaskCreate from \"./create\";\nimport TaskList from \"./list\";\nimport Nav from \"./nav\";\nimport GoodsSubscribe from \"./subscribe\";\n\nReactDOM.render(\n    <HashRouter>\n        <Switch>\n            <Nav>\n                <Route path=\"/\" exact={true}  component={TaskList} />\n                <Route path=\"/create\" component={TaskCreate} />\n                <Route path=\"/subscribe\" component={GoodsSubscribe} />\n            </Nav>\n        </Switch>\n    </HashRouter>,\n    document.getElementById(\"root\") as HTMLElement,\n    () => console.log(\"Page 服务已启动\"),\n);\n"],"sourceRoot":""}